
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct _node{
	int data;
	struct _node	*left, *right;
};
typedef struct _node	BTree;
typedef BTree	*PBTree;

int GenTree(PBTree parent) {
	static int value = 1;
	if(parent == NULL ) return 1; 
	parent->left = (PBTree)calloc(1,sizeof(BTree));
	parent->left->data = value++;
	parent->right = (PBTree)calloc(1,sizeof(BTree));
	parent->right->data = value++;
	return 0;
}
int Print(PBTree root){
	if(root == NULL ) return 1;

	printf("%d	", root->data );
	Print(root->left);
	Print(root->right);
	return 0;
}
int PrintLevel( PBTree root ){
	PBTree *list=NULL;// Dynamic Array
	PBTree *list_sub=NULL;
	int i,j,level=1;
	int size;

	printf("%d	\n", root->data);
	list =(PBTree*)realloc(list,sizeof(PBTree)*(1));
	size = 1;
	for(level=1;level<5;++level){
		for(i=0,j=0;i<size;++i){
			list_sub = 
				(PBTree*)realloc(list_sub,sizeof(PBTree)*(j+2));
			list_sub[j++] = list[i]->left;
			list_sub[j++] = list[i]->right;
		}
		for(i=0;i<j;++i){
			printf("%d	", list_sub[i]->data );
		}
		printf("\n");

		free(list); // Memory reduce
		size = j;
		list = list_sub;
		list_sub = NULL;
	}

	return 0;
}
int main( void ){
	PBTree	root;
	PBTree *list=NULL;// Dynamic Array
	PBTree *list_sub=NULL;
	int i,j,level=1;
	int size;

	root = (PBTree)calloc(1,sizeof(BTree) );
	root->data = 0;
	size = 1;
	list = (PBTree*)realloc(list, sizeof(PBTree)*size);
	list[size-1] = root;

	for(level=1;level<5;++level){
		for(i=0,j=0;i<size;++i){
			GenTree( list[i] );	// create child (left, right);
			list_sub = 
				(PBTree*)realloc(list_sub,sizeof(PBTree)*(j+2));
			list_sub[j++] = list[i]->left;
			list_sub[j++] = list[i]->right;
		}
		free(list); // Memory reduce
		size = j;
		list = list_sub;
		list_sub = NULL;
	}
	Print(root);
	PrintLevel(root);

	return 0;
}
int traverse_main( void ){
	PBTree root;
	PBTree parent;
	root = (PBTree)malloc( sizeof( BTree ) );
	root->data = 0;
	root->left = root->right = NULL;

	parent = root;
	while(getch()!='\r'){
		GenTree(parent);
		if( parent->left->left == NULL ){
			parent = parent->left;
		}else if( parent->right->left == NULL ){
			parent = parent->right;
		}else{

		}
	}
/*
	parent = root->left;
	GenTree(parent);
	parent = root->right;
	GenTree(parent);
*/
	Print(root);


	return 0;
}